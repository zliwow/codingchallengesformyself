class Solution:
    def minimumRounds(self, tasks: List[int]) -> int:
        dict1 = {}
        for i in tasks:
            dict1[i] = 1 + dict1.get(i, 0)
        res = 0
        for i in dict1.values():
            print(i)
            if i == 1:
                return -1
            while i >= 3:
                i -= 3
                res += 1
            if i > 0:
                res += 1
        return res
        
        
Better written but similar idea:
class Solution:
    def minimumRounds(self, tasks: list[int]) -> int:
                                            # Example: tasks = [2,2,3,3,2,4,4,4,4,4,4,4]

        tasks = Counter(tasks)              #          tasks = {3:2, 2:3, 4:5}
        
        if 1 in tasks.values(): return -1   # <-- no solution if there's a singleton

        ans = 0                             # tasks.values() = [2, 3, 5]     
        for n in tasks.values():
            ans+= n//3 + bool(n%3)          # ans  = (2//3+True) + (3//3+False) + (5//3+True)
                                            #      = ( 0  +  1  ) + (  1 +  0 ) + (1   +  1 )
        return  ans                         #      = 4  <-- return
